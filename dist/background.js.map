{"version":3,"sources":["background.js"],"names":["console","log","chrome","runtime","onMessage","addListener","request","sender","sendResponse","message"],"mappings":";AAAAA,QAAQC,IAAR,kCAGAC,OAAOC,QAAQC,UAAUC,YAAY,SAASC,EAASC,EAAQC,GACnDF,OAAAA,EAAQG,SACT,IAAA,OACHT,QAAQC,IAAR,qBACA,MACG,IAAA,OACHD,QAAQC,IAAR,qBACA,MACG,IAAA,QACHD,QAAQC,IAAR,sBACA,MACF,QACED,QAAQC,IAAR","file":"background.js","sourceRoot":"../src","sourcesContent":["console.log(`[background] script is running`);\n\n\nchrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {\n    switch (request.message) {\n      case \"stop\":\n        console.log(`[background] stop`);\n        break;\n      case \"good\":\n        console.log(`[background] good`);\n        break;\n      case \"money\":\n        console.log(`[background] money`);\n        break;\n      default:\n        console.log(`[background] not button msg`);\n    }\n  });\n\n\n// background may be used to block all requests. For now plugin uses only content scripts\n\n// let currState;\n\n// const blockURLcb = function(details) {\n// //   console.log(\"blocking:\", details.url);\n//   if (!white_list.includes(details.url)) {\n//     console.log(`REDIRECT current url ${details.url} is not on the whitelist`);\n//     // return { redirectUrl: \"https://placekitten.com/200/300\" };\n//     return { cancel: true };\n//   } else {\n//     console.log(`ALLOW current url ${details.url} is on the whitelist do not block`);\n//     return { cancel: false}\n//   }\n// };\n\n// // todo \n// chrome.storage.local.get([\"blocker\"], function(result) {\n//   currState = result.blocker === undefined ? true : result.blocker;\n//   console.log(`at init current state is ${currState}`);\n//   if (currState) {\n//     console.log(`init adding blocking listener`);\n//     currState = true;\n//     chrome.storage.local.set({ blocker: true }, () =>\n//       console.log(\"bolcker state set in starge to true\")\n//     );\n//     chrome.webRequest.onBeforeRequest.addListener(\n//       blockURLcb,\n//       { urls: blocked_domains },\n//       [\"blocking\"]\n//     );\n//   } else {\n//     console.log(`init removing blocking listener`);\n//     currState = false;\n//     chrome.storage.local.set({ blocker: false }, () =>\n//       console.log(\"bolcker state set in starage to false\")\n//     );\n//     chrome.webRequest.onBeforeRequest.removeListener(blockURLcb);\n//   }\n// });\n\n// //  todo -> sync with local storage instead of listening for messages\n// chrome.runtime.onMessage.addListener(function(message, sender, sendResponse) {\n//   if (message.checkbox === \"true\") {\n//     console.log(`adding blocking listener`);\n//     chrome.storage.local.set({ blocker: true }, () =>\n//       console.log(\"message - bolcker state set to true\")\n//     );\n//     chrome.webRequest.onBeforeRequest.addListener(\n//       blockURLcb,\n//       { urls: blocked_domains },\n//       [\"blocking\"]\n//     );\n//   } else if (message.checkbox === \"false\") {\n//     console.log(`removing blocking listener`);\n//     console.log(`${message.checkbox} - false`);\n//     chrome.storage.local.set({ blocker: false }, () =>\n//       console.log(\"message bolcker state false\")\n//     );\n\n//     chrome.webRequest.onBeforeRequest.removeListener(blockURLcb);\n//   }\n// });\n"]}